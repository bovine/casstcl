# Commands covered:  casstcl::cass
#
# This file contains a collection of tests for one or more of the Tcl
# package commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Written by Joe Mistachkin.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.

if {[lsearch [namespace children] ::tcltest] == -1} then {
  package require tcltest
  namespace import ::tcltest::*
}

set path [file normalize [file dirname [info script]]]
package require casstcl

###############################################################################

if {[llength [info commands appendArgs]] == 0} then {
  proc appendArgs { args } {
    set result ""; eval append result $args
  }
}

###############################################################################

if {[llength [info commands getEnvVar]] == 0} then {
  proc getEnvVar { name {default ""} } {
    if {![info exists ::env($name)]} then {
      if {![info exists ::warn($name)]} then {
        tcltest::Warn [appendArgs \
            "missing environment variable \"" $name \
            "\", using default \"" $default \"...]

        set ::warn($name) 1
      }

      return $default
    }
    return $::env($name)
  }
}

###############################################################################

if {[llength [info commands getDictValue]] == 0} then {
  proc getDictValue { dictionary name {default ""} {wrap ""} } {
    if {[llength [info commands dict]] > 0} then {
      if {[dict exists $dictionary $name]} then {
        return [appendArgs $wrap [dict get $dictionary $name] $wrap]
      }

      return $default
    } else {
      foreach {pairName pairValue} $dictionary {
        if {$pairName eq $name} then {
          return [appendArgs $wrap $pairValue $wrap]
        }
      }

      return $default
    }
  }
}

###############################################################################

if {[llength [info commands cass_test_output]] == 0} then {
  proc cass_test_output { string } {
    catch {
      puts [tcltest::outputChannel] [appendArgs "---- " $string]
      flush [tcltest::outputChannel]
    }
  }
}

###############################################################################

if {[llength [info commands cass_test_callback]] == 0} then {
  proc cass_test_callback { dictionary } {
    cass_test_output $dictionary
  }
}

###############################################################################

if {[llength [info commands cass_test_connect]] == 0} then {
  proc cass_test_connect { varName {cmdName ""} {points ""} {port ""} } {
    upvar 1 $varName newCmdName

    set newCmdName [casstcl::cass create \
        [expr {[string length $cmdName] > 0 ? $cmdName : "#auto"}]]

    if {[string length $points] == 0} then {
      set points [getEnvVar \
          CASSTCL_CONTACT_POINTS 127.0.0.1,127.0.0.2,127.0.0.3]
    }

    if {[string length $port] == 0} then {
      set port [getEnvVar CASSTCL_PORT 9042]
    }

    $newCmdName contact_points $points
    $newCmdName port $port
    $newCmdName connect
  }
}

###############################################################################

if {[llength [info commands cass_test_service_events]] == 0} then {
  proc cass_test_service_events { varName {milliseconds 5000} } {
    cass_test_output "starting to service events"
    uplevel 1 [list unset -nocomplain $varName]
    uplevel 1 [list after $milliseconds [list set $varName 1]]
    uplevel 1 [list vwait $varName]
    cass_test_output "done with servicing events"
  }
}

###############################################################################

if {[llength [info commands cass_test_cleanup]] == 0} then {
  proc cass_test_cleanup { varName {delete true} {drop false} } {
    upvar 1 $varName cmdName

    #
    # TODO: Why does trying to DROP a nonexistent keyspace cause
    #       tests to hang?
    #
    if {$drop} then {
      set keyspace [cass_test_get_keyspace]

      catch {$cmdName exec [subst {
        DROP KEYSPACE $keyspace;
      }]}
    }

    #
    # NOTE: When the delete argument is non-zero, call the method;
    #       otherwise, rely on the Tcl command deletion callback.
    #
    if {$delete} then {
      catch {$cmdName delete}
    } else {
      rename $cmdName ""
    }
  }
}

###############################################################################

if {[llength [info commands cass_test_get_keyspace]] == 0} then {
  proc cass_test_get_keyspace {} {
    return [appendArgs cass_test_safe_to_delete_ [pid]]
  }
}

###############################################################################

test cass-1.1 {overall command usage} -body {
  list [catch {casstcl::cass} errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {1 {wrong # args: should be "casstcl::cass subcommand ?args?"}}

###############################################################################

test cass-2.1 {create sub-command usage} -body {
  list [catch {casstcl::cass create} errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {1 {wrong # args: should be "casstcl::cass option arg"}}

###############################################################################

test cass-2.2 {logging_callback sub-command usage} -body {
  list [catch {casstcl::cass logging_callback} errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {1 {wrong # args: should be "casstcl::cass option arg"}}

###############################################################################

test cass-3.1 {set and reset logging callback} -body {
  list [catch {
    casstcl::cass logging_callback cass_test_callback

    #
    # TODO: Permit the logging callback to be unset/reset.  This would
    #       actually require the DataStax driver itself to be modified
    #       as it does not currently support getting (for save/restore
    #       semantics) or resetting/unsetting the logging callback in
    #       any way.  Also, by default, it outputs to stderr, which
    #       causes tcltest to believe that this test file has failed.
    #
    # casstcl::cass logging_callback ""
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {0 {}}

###############################################################################

test cass-4.1 {create manually named command} -body {
  list [catch {
    set cmd cass-4.1
    casstcl::cass create $cmd
    rename $cmd ""
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain cmd errMsg
} -result {0 {}}

###############################################################################

test cass-4.2 {create automatically named command} -body {
  list [catch {
    set cmd [casstcl::cass create #auto]
    rename $cmd ""
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain cmd errMsg
} -result {0 {}}

###############################################################################

test cass-5.1 {connect (failure)} -body {
  list [catch {
    cass_test_connect cmd "" "" 11111; # NOTE: Port must be "invalid".
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd

  unset -nocomplain svc cmd errMsg
} -result {1 {cassandra error: No hosts available}}

###############################################################################

test cass-5.2 {connect (success)} -body {
  list [catch {
    cass_test_connect cmd
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd

  unset -nocomplain svc cmd errMsg
} -result {0 {}}

###############################################################################

test cass-6.1 {metadata: list keyspaces} -body {
  list [catch {
    cass_test_connect cmd
    $cmd keyspaces
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd

  unset -nocomplain svc cmd errMsg
} -match regexp -result {^0 \{.+\}$}

###############################################################################

test cass-6.2 {metadata: list tables} -body {
  list [catch {
    set keyspace [cass_test_get_keyspace]
    cass_test_connect cmd
    $cmd exec [subst {
      CREATE KEYSPACE $keyspace WITH REPLICATION = {
        'class' : 'SimpleStrategy', 'replication_factor' : 1
      };
    }]
    $cmd exec [subst {
      CREATE TABLE $keyspace.cass62 (
        column_one text,
        PRIMARY KEY(column_one)
      );
    }]
    $cmd tables $keyspace
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd true true

  unset -nocomplain keyspace svc cmd errMsg
} -result {0 cass62}

###############################################################################

test cass-6.3 {metadata: list tables with bad keyspace} -body {
  list [catch {
    set keyspace [cass_test_get_keyspace]
    cass_test_connect cmd
    $cmd exec [subst {
      CREATE KEYSPACE $keyspace WITH REPLICATION = {
        'class' : 'SimpleStrategy', 'replication_factor' : 1
      };
    }]
    $cmd exec [subst {
      CREATE TABLE $keyspace.cass63 (
        column_one text,
        PRIMARY KEY(column_one)
      );
    }]
    $cmd tables cass_test_bad
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd true true

  unset -nocomplain keyspace svc cmd errMsg
} -result {1 {keyspace 'cass_test_bad' not found}}

###############################################################################

test cass-6.4 {metadata: list columns} -body {
  list [catch {
    set keyspace [cass_test_get_keyspace]
    cass_test_connect cmd
    $cmd exec [subst {
      CREATE KEYSPACE $keyspace WITH REPLICATION = {
        'class' : 'SimpleStrategy', 'replication_factor' : 1
      };
    }]
    $cmd exec [subst {
      CREATE TABLE $keyspace.cass64 (
        column_one text,
        PRIMARY KEY(column_one)
      );
    }]
    $cmd columns $keyspace cass64
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd true true

  unset -nocomplain keyspace svc cmd errMsg
} -result {0 column_one}

###############################################################################

test cass-6.5 {metadata: list columns with bad keyspace} -body {
  list [catch {
    set keyspace [cass_test_get_keyspace]
    cass_test_connect cmd
    $cmd exec [subst {
      CREATE KEYSPACE $keyspace WITH REPLICATION = {
        'class' : 'SimpleStrategy', 'replication_factor' : 1
      };
    }]
    $cmd exec [subst {
      CREATE TABLE $keyspace.cass65 (
        column_one text,
        PRIMARY KEY(column_one)
      );
    }]
    $cmd columns cass_test_bad cass65
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd true true

  unset -nocomplain keyspace svc cmd errMsg
} -result {1 {keyspace 'cass_test_bad' not found}}

###############################################################################

test cass-6.6 {metadata: list columns with bad table} -body {
  list [catch {
    set keyspace [cass_test_get_keyspace]
    cass_test_connect cmd
    $cmd exec [subst {
      CREATE KEYSPACE $keyspace WITH REPLICATION = {
        'class' : 'SimpleStrategy', 'replication_factor' : 1
      };
    }]
    $cmd exec [subst {
      CREATE TABLE $keyspace.cass66 (
        column_one text,
        PRIMARY KEY(column_one)
      );
    }]
    $cmd columns $keyspace cass66_bad
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd true true

  unset -nocomplain keyspace svc cmd errMsg
} -result [subst {1\
{table 'cass66_bad' not found in keyspace '[cass_test_get_keyspace]'}}]

###############################################################################

test cass-6.7 {metadata: list columns types} -body {
  list [catch {
    set keyspace [cass_test_get_keyspace]
    cass_test_connect cmd
    $cmd exec [subst {
      CREATE KEYSPACE $keyspace WITH REPLICATION = {
        'class' : 'SimpleStrategy', 'replication_factor' : 1
      };
    }]
    $cmd exec [subst {
      CREATE TABLE $keyspace.cass67 (
        column_one text,
        PRIMARY KEY(column_one)
      );
    }]
    $cmd columns_with_types $keyspace cass67
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd true true

  unset -nocomplain keyspace svc cmd errMsg
} -result {0 {column_one text}}

###############################################################################

test cass-6.8 {metadata: list columns types with bad keyspace} -body {
  list [catch {
    set keyspace [cass_test_get_keyspace]
    cass_test_connect cmd
    $cmd exec [subst {
      CREATE KEYSPACE $keyspace WITH REPLICATION = {
        'class' : 'SimpleStrategy', 'replication_factor' : 1
      };
    }]
    $cmd exec [subst {
      CREATE TABLE $keyspace.cass68 (
        column_one text,
        PRIMARY KEY(column_one)
      );
    }]
    $cmd columns_with_types cass_test_bad cass68
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd true true

  unset -nocomplain keyspace svc cmd errMsg
} -result {1 {keyspace 'cass_test_bad' not found}}

###############################################################################

test cass-6.9 {metadata: list columns types with bad table} -body {
  list [catch {
    set keyspace [cass_test_get_keyspace]
    cass_test_connect cmd
    $cmd exec [subst {
      CREATE KEYSPACE $keyspace WITH REPLICATION = {
        'class' : 'SimpleStrategy', 'replication_factor' : 1
      };
    }]
    $cmd exec [subst {
      CREATE TABLE $keyspace.cass69 (
        column_one text,
        PRIMARY KEY(column_one)
      );
    }]
    $cmd columns_with_types $keyspace cass69_bad
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd true true

  unset -nocomplain keyspace svc cmd errMsg
} -result [subst {1\
{table 'cass69_bad' not found in keyspace '[cass_test_get_keyspace]'}}]

###############################################################################

test cass-7.1 {close without delete} -body {
  list [catch {
    cass_test_connect cmd
    $cmd close
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd false

  unset -nocomplain svc cmd errMsg
} -result {0 {}}

###############################################################################

test cass-7.2 {close with delete} -body {
  list [catch {
    cass_test_connect cmd
    $cmd close
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd true

  unset -nocomplain svc cmd errMsg
} -result {0 {}}

###############################################################################

test cass-8.1 {select without page size} -body {
  list [catch {
    cass_test_connect cmd

    set result [list]

    $cmd select {
      SELECT keyspace_name FROM system.schema_keyspaces;
    } row {
      lappend result [array get row]
    }

    set result
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd true

  unset -nocomplain result rows svc cmd errMsg
} -match regexp -result \
{^0 \{(?:\{keyspace_name (?:.*)\}) (?:\{keyspace_name (?:.*)\})*\}$}

###############################################################################

test cass-8.2 {select with page size} -body {
  list [catch {
    cass_test_connect cmd

    set result [list]

    $cmd select -pagesize 1 {
      SELECT keyspace_name FROM system.schema_keyspaces;
    } row {
      lappend result [array get row]
    }

    set result
  } errMsg] $errMsg
} -cleanup {
  cass_test_service_events svc
  cass_test_cleanup cmd true

  unset -nocomplain result rows svc cmd errMsg
} -match regexp -result \
{^0 \{(?:\{keyspace_name (?:.*)\}) (?:\{keyspace_name (?:.*)\})*\}$}

###############################################################################

foreach procName [info commands cass_test_*] {rename $procName ""}
unset -nocomplain procName

###############################################################################

unset -nocomplain path

# cleanup
::tcltest::cleanupTests
return
